/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufal.ic.se.node;

import java.util.*;
import br.ufal.ic.se.analysis.*;

public class ANegationComplexsentence extends PComplexsentence
{
    private TNot _not_;
    private PSentence _sentence_;

    public ANegationComplexsentence()
    {
    }

    public ANegationComplexsentence(
        TNot _not_,
        PSentence _sentence_)
    {
        setNot(_not_);

        setSentence(_sentence_);

    }
    public Object clone()
    {
        return new ANegationComplexsentence(
            (TNot) cloneNode(_not_),
            (PSentence) cloneNode(_sentence_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANegationComplexsentence(this);
    }

    public TNot getNot()
    {
        return _not_;
    }

    public void setNot(TNot node)
    {
        if(_not_ != null)
        {
            _not_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _not_ = node;
    }

    public PSentence getSentence()
    {
        return _sentence_;
    }

    public void setSentence(PSentence node)
    {
        if(_sentence_ != null)
        {
            _sentence_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _sentence_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_not_)
            + toString(_sentence_);
    }

    void removeChild(Node child)
    {
        if(_not_ == child)
        {
            _not_ = null;
            return;
        }

        if(_sentence_ == child)
        {
            _sentence_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_not_ == oldChild)
        {
            setNot((TNot) newChild);
            return;
        }

        if(_sentence_ == oldChild)
        {
            setSentence((PSentence) newChild);
            return;
        }

    }
}

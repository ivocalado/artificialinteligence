/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufal.ic.se.analysis;

import br.ufal.ic.se.node.*;
import java.util.*;


public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAAtomSentence(AAtomSentence node)
    {
        defaultCase(node);
    }

    public void caseAComplexSentence(AComplexSentence node)
    {
        defaultCase(node);
    }

    public void caseATruesentenceAtomicsentence(ATruesentenceAtomicsentence node)
    {
        defaultCase(node);
    }

    public void caseAFalsesentenceAtomicsentence(AFalsesentenceAtomicsentence node)
    {
        defaultCase(node);
    }

    public void caseASymbolAtomicsentence(ASymbolAtomicsentence node)
    {
        defaultCase(node);
    }

    public void caseANegationComplexsentence(ANegationComplexsentence node)
    {
        defaultCase(node);
    }

    public void caseAAndsentenceComplexsentence(AAndsentenceComplexsentence node)
    {
        defaultCase(node);
    }

    public void caseAOrsentenceComplexsentence(AOrsentenceComplexsentence node)
    {
        defaultCase(node);
    }

    public void caseAEntailssentenceComplexsentence(AEntailssentenceComplexsentence node)
    {
        defaultCase(node);
    }

    public void caseABentailssentenceComplexsentence(ABentailssentenceComplexsentence node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTEntails(TEntails node)
    {
        defaultCase(node);
    }

    public void caseTBidientails(TBidientails node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTLpar(TLpar node)
    {
        defaultCase(node);
    }

    public void caseTRpar(TRpar node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTLetter(TLetter node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
